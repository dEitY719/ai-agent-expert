{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# FastMCP 제작 및 ADK 연동 튜토리얼\n",
        "\n",
        "## 학습 목표\n",
        "- FastMCP를 사용하여 실용적인 MCP 서버를 만드는 방법 학습\n",
        "- mcp_방법.txt 문서 기반의 실무 패턴 적용\n",
        "- ADK(Agent Development Kit)와 MCP 연동 방법 이해\n",
        "- 실전 테스트를 통한 통합 검증\n",
        "\n",
        "## 목차\n",
        "1. [FastMCP 상세 사용법](#1-fastmcp-상세-사용법)\n",
        "2. [실제 작동 테스트](#2-실제-작동-테스트)\n",
        "3. [기존 연구 자료 저장 MCP 분석](#3-기존-연구-자료-저장-mcp-분석)\n",
        "4. [ADK와 MCP 연동 가이드](#4-adk와-mcp-연동-가이드)\n",
        "5. [실전 테스트 및 학습 정리](#5-실전-테스트-및-학습-정리)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "2025-09-05 06:35:49,336 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Basic Calculator Server'\n",
            "2025-09-05 06:35:49,339 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest\n",
            "2025-09-05 06:35:49,339 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest\n",
            "2025-09-05 06:35:49,340 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest\n",
            "2025-09-05 06:35:49,340 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest\n",
            "2025-09-05 06:35:49,341 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest\n",
            "2025-09-05 06:35:49,342 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest\n",
            "2025-09-05 06:35:49,343 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest\n",
            "2025-09-05 06:35:49,354 - mcp.server.lowlevel.server - DEBUG - Initializing server 'Advanced Math Server'\n",
            "2025-09-05 06:35:49,355 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListToolsRequest\n",
            "2025-09-05 06:35:49,355 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourcesRequest\n",
            "2025-09-05 06:35:49,356 - mcp.server.lowlevel.server - DEBUG - Registering handler for ListResourceTemplatesRequest\n",
            "2025-09-05 06:35:49,356 - mcp.server.lowlevel.server - DEBUG - Registering handler for PromptListRequest\n",
            "2025-09-05 06:35:49,356 - mcp.server.lowlevel.server - DEBUG - Registering handler for CallToolRequest\n",
            "2025-09-05 06:35:49,357 - mcp.server.lowlevel.server - DEBUG - Registering handler for ReadResourceRequest\n",
            "2025-09-05 06:35:49,357 - mcp.server.lowlevel.server - DEBUG - Registering handler for GetPromptRequest\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "✅ FastMCP 설정 완료!\n",
            "🔧 정의된 함수들:\n",
            "  - add_numbers(): 기본 덧셈\n",
            "  - multiply_with_format_impl(): 고급 곱셈\n",
            "  - divide_safely_impl(): 안전한 나눗셈\n",
            "  - batch_operations_impl(): 일괄 연산\n",
            "📡 MCP 도구로 등록된 함수들:\n",
            "  - add(), multiply_with_format(), divide_safely(), batch_operations()\n"
          ]
        }
      ],
      "source": [
        "# FastMCP 상세 사용법 - mcp_방법.txt 문서 기반\n",
        "from fastmcp import FastMCP\n",
        "from typing import List, Dict, Any, Optional\n",
        "import logging\n",
        "from datetime import datetime\n",
        "\n",
        "# 1. 서버 생성\n",
        "basic_server = FastMCP(\n",
        "    name=\"Basic Calculator Server\",\n",
        "    instructions=\"간단한 계산을 수행하는 MCP 서버입니다.\"\n",
        ")\n",
        "\n",
        "advanced_server = FastMCP(\n",
        "    name=\"Advanced Math Server\",\n",
        "    instructions=\"\"\"\n",
        "    고급 수학 계산을 수행하는 MCP 서버입니다.\n",
        "    \n",
        "    제공하는 기능:\n",
        "    1. 기본 연산: add, multiply, divide (0으로 나누기 방지)\n",
        "    2. 고급 연산: batch_operations (여러 숫자 일괄 처리)\n",
        "    3. 에러 처리: 모든 도구에 안전장치 내장\n",
        "    \n",
        "    사용 규칙:\n",
        "    - 모든 숫자는 float 타입으로 처리\n",
        "    - 에러 발생 시 'error' 필드 확인 필수\n",
        "    - 성공 시 'success': True 포함\n",
        "    \"\"\"\n",
        ")\n",
        "\n",
        "# 2. 구현 함수들 정의 (테스트 가능하도록)\n",
        "def add_numbers(a: float, b: float) -> float:\n",
        "    \"\"\"두 숫자를 더합니다\"\"\"\n",
        "    return a + b\n",
        "\n",
        "def multiply_with_format_impl(a: float, b: float) -> Dict[str, Any]:\n",
        "    \"\"\"고급 곱셈 구현\"\"\"\n",
        "    try:\n",
        "        result = a * b\n",
        "        return {\n",
        "            \"input_a\": a,\n",
        "            \"input_b\": b,\n",
        "            \"result\": result,\n",
        "            \"operation\": \"multiplication\",\n",
        "            \"formatted_result\": f\"{a} × {b} = {result}\",\n",
        "            \"success\": True,\n",
        "            \"timestamp\": datetime.now().isoformat()\n",
        "        }\n",
        "    except Exception as e:\n",
        "        return {\n",
        "            \"error\": \"CALCULATION_ERROR\",\n",
        "            \"message\": f\"곱셈 중 오류 발생: {str(e)}\",\n",
        "            \"success\": False\n",
        "        }\n",
        "\n",
        "def divide_safely_impl(dividend: float, divisor: float) -> Dict[str, Any]:\n",
        "    \"\"\"안전한 나눗셈 구현\"\"\"\n",
        "    # 타입 검증\n",
        "    if not isinstance(dividend, (int, float)) or not isinstance(divisor, (int, float)):\n",
        "        return {\n",
        "            \"error\": \"TYPE_ERROR\",\n",
        "            \"message\": \"입력값은 숫자여야 합니다\",\n",
        "            \"success\": False\n",
        "        }\n",
        "    \n",
        "    # 0으로 나누기 방지\n",
        "    if divisor == 0:\n",
        "        return {\n",
        "            \"error\": \"DIVISION_BY_ZERO\",\n",
        "            \"message\": \"0으로 나눌 수 없습니다\",\n",
        "            \"suggestion\": \"0이 아닌 나누는 수를 입력하세요\",\n",
        "            \"success\": False\n",
        "        }\n",
        "    \n",
        "    # 정상 계산\n",
        "    result = dividend / divisor\n",
        "    return {\n",
        "        \"dividend\": dividend,\n",
        "        \"divisor\": divisor,\n",
        "        \"result\": round(result, 6),\n",
        "        \"operation\": \"division\",\n",
        "        \"success\": True\n",
        "    }\n",
        "\n",
        "def batch_operations_impl(numbers: List[float], operation: str = \"sum\") -> Dict[str, Any]:\n",
        "    \"\"\"일괄 연산 구현\"\"\"\n",
        "    # 입력 검증\n",
        "    if not numbers:\n",
        "        return {\n",
        "            \"error\": \"EMPTY_INPUT\",\n",
        "            \"message\": \"숫자 리스트가 비어있습니다\",\n",
        "            \"success\": False\n",
        "        }\n",
        "    \n",
        "    # 숫자 타입 검증\n",
        "    try:\n",
        "        validated_numbers = [float(n) for n in numbers]\n",
        "    except (ValueError, TypeError):\n",
        "        return {\n",
        "            \"error\": \"INVALID_NUMBER\",\n",
        "            \"message\": \"유효하지 않은 숫자가 포함되어 있습니다\",\n",
        "            \"success\": False\n",
        "        }\n",
        "    \n",
        "    # 연산 수행\n",
        "    if operation == \"sum\":\n",
        "        result = sum(validated_numbers)\n",
        "    elif operation == \"product\":\n",
        "        result = 1\n",
        "        for num in validated_numbers:\n",
        "            result *= num\n",
        "    elif operation == \"average\":\n",
        "        result = sum(validated_numbers) / len(validated_numbers)\n",
        "    elif operation == \"max\":\n",
        "        result = max(validated_numbers)\n",
        "    elif operation == \"min\":\n",
        "        result = min(validated_numbers)\n",
        "    else:\n",
        "        return {\n",
        "            \"error\": \"UNKNOWN_OPERATION\",\n",
        "            \"message\": f\"지원하지 않는 연산입니다: {operation}\",\n",
        "            \"supported_operations\": [\"sum\", \"product\", \"average\", \"max\", \"min\"],\n",
        "            \"success\": False\n",
        "        }\n",
        "    \n",
        "    return {\n",
        "        \"input_numbers\": validated_numbers,\n",
        "        \"operation\": operation,\n",
        "        \"result\": result,\n",
        "        \"count\": len(validated_numbers),\n",
        "        \"success\": True\n",
        "    }\n",
        "\n",
        "# 3. FastMCP 도구로 등록\n",
        "@basic_server.tool()\n",
        "def add(a: float, b: float) -> float:\n",
        "    \"\"\"두 숫자를 더합니다\"\"\"\n",
        "    return add_numbers(a, b)\n",
        "\n",
        "@advanced_server.tool(name=\"advanced_multiply\")\n",
        "def multiply_with_format(a: float, b: float) -> Dict[str, Any]:\n",
        "    \"\"\"고급 곱셈 도구\"\"\"\n",
        "    return multiply_with_format_impl(a, b)\n",
        "\n",
        "@advanced_server.tool(name=\"safe_divide\")\n",
        "def divide_safely(dividend: float, divisor: float) -> Dict[str, Any]:\n",
        "    \"\"\"안전한 나눗셈 도구\"\"\"\n",
        "    return divide_safely_impl(dividend, divisor)\n",
        "\n",
        "@advanced_server.tool(name=\"batch_calculate\")\n",
        "def batch_operations(numbers: List[float], operation: str = \"sum\") -> Dict[str, Any]:\n",
        "    \"\"\"일괄 연산 도구\"\"\"\n",
        "    return batch_operations_impl(numbers, operation)\n",
        "\n",
        "print(\"✅ FastMCP 설정 완료!\")\n",
        "print(\"🔧 정의된 함수들:\")\n",
        "print(\"  - add_numbers(): 기본 덧셈\")\n",
        "print(\"  - multiply_with_format_impl(): 고급 곱셈\")\n",
        "print(\"  - divide_safely_impl(): 안전한 나눗셈\")\n",
        "print(\"  - batch_operations_impl(): 일괄 연산\")\n",
        "print(\"📡 MCP 도구로 등록된 함수들:\")\n",
        "print(\"  - add(), multiply_with_format(), divide_safely(), batch_operations()\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "=== FastMCP 서버 작동 테스트 ===\n",
            "\n",
            " 기본 계산기 서버 테스트\n",
            " add_numbers(15, 25) = 40\n",
            "\n",
            " 계산기 서버 테스트\n",
            " 고급 곱셈 결과:\n",
            "  8 × 7 = 56\n",
            "  성공: True\n",
            "\n",
            " 안전한 나눗셈 (정상):\n",
            "  100 ÷ 4 = 25.0\n",
            "  성공: True\n",
            "\n",
            "Zerodivision 처리:\n",
            "  오류: DIVISION_BY_ZERO\n",
            "  메시지: 0으로 나눌 수 없습니다\n",
            "  제안: 0이 아닌 나누는 수를 입력하세요\n",
            "\n",
            "연산 테스트\n",
            " 합계: [1.0, 2.0, 3.0, 4.0, 5.0] → 15.0\n",
            " 평균: [10.0, 20.0, 30.0] → 20.0\n",
            " 곱셈: [2.0, 3.0, 4.0] → 24.0\n",
            " 최대값: 15.0, 최소값: 3.0\n",
            "\n",
            "에러 처리 테스트\n",
            " 빈 리스트 오류: EMPTY_INPUT - 숫자 리스트가 비어있습니다\n",
            " 알 수 없는 연산: UNKNOWN_OPERATION\n",
            "  지원 연산: ['sum', 'product', 'average', 'max', 'min']\n",
            " 타입 오류: TYPE_ERROR - 입력값은 숫자여야 합니다\n"
          ]
        }
      ],
      "source": [
        "# 실제 작동 테스트 - 구현 함수들을 직접 호출\n",
        "print(\"=== FastMCP 서버 작동 테스트 ===\")\n",
        "\n",
        "# 1. 기본 서버 도구 테스트\n",
        "print(\"\\n 기본 계산기 서버 테스트\")\n",
        "add_result = add_numbers(15, 25)\n",
        "print(f\" add_numbers(15, 25) = {add_result}\")\n",
        "\n",
        "# 2. 서버 도구 테스트\n",
        "print(\"\\n 계산기 서버 테스트\")\n",
        "\n",
        "# 곱셈 테스트\n",
        "multiply_result = multiply_with_format_impl(8, 7)\n",
        "print(f\" 고급 곱셈 결과:\")\n",
        "print(f\"  {multiply_result['formatted_result']}\")\n",
        "print(f\"  성공: {multiply_result['success']}\")\n",
        "\n",
        "# 나눗셈 - 정상 케이스\n",
        "divide_result = divide_safely_impl(100, 4)\n",
        "print(f\"\\n 안전한 나눗셈 (정상):\")\n",
        "print(f\"  {divide_result['dividend']} ÷ {divide_result['divisor']} = {divide_result['result']}\")\n",
        "print(f\"  성공: {divide_result['success']}\")\n",
        "\n",
        "# 안전한 나눗셈 - Zerodivision 오류 테스트\n",
        "divide_error = divide_safely_impl(100, 0)\n",
        "print(f\"\\nZerodivision 처리:\")\n",
        "print(f\"  오류: {divide_error['error']}\")\n",
        "print(f\"  메시지: {divide_error['message']}\")\n",
        "print(f\"  제안: {divide_error['suggestion']}\")\n",
        "\n",
        "# 일괄 연산 테스트들\n",
        "print(f\"\\n연산 테스트\")\n",
        "\n",
        "# 합계 연산\n",
        "batch_sum = batch_operations_impl([1, 2, 3, 4, 5], \"sum\")\n",
        "print(f\" 합계: {batch_sum['input_numbers']} → {batch_sum['result']}\")\n",
        "\n",
        "# 평균 연산\n",
        "batch_avg = batch_operations_impl([10, 20, 30], \"average\")\n",
        "print(f\" 평균: {batch_avg['input_numbers']} → {batch_avg['result']}\")\n",
        "\n",
        "# 곱셈 연산\n",
        "batch_product = batch_operations_impl([2, 3, 4], \"product\")\n",
        "print(f\" 곱셈: {batch_product['input_numbers']} → {batch_product['result']}\")\n",
        "\n",
        "# 최대값/최소값\n",
        "batch_max = batch_operations_impl([5, 15, 3, 9, 12], \"max\")\n",
        "batch_min = batch_operations_impl([5, 15, 3, 9, 12], \"min\")\n",
        "print(f\" 최대값: {batch_max['result']}, 최소값: {batch_min['result']}\")\n",
        "\n",
        "# 3. 에러 처리 테스트\n",
        "print(f\"\\n에러 처리 테스트\")\n",
        "\n",
        "# 빈 리스트 오류\n",
        "empty_error = batch_operations_impl([], \"sum\")\n",
        "print(f\" 빈 리스트 오류: {empty_error['error']} - {empty_error['message']}\")\n",
        "\n",
        "# 지원하지 않는 연산 오류\n",
        "unknown_op_error = batch_operations_impl([1, 2, 3], \"unknown_operation\")\n",
        "print(f\" 알 수 없는 연산: {unknown_op_error['error']}\")\n",
        "print(f\"  지원 연산: {unknown_op_error['supported_operations']}\")\n",
        "\n",
        "# 타입 오류 테스트\n",
        "type_error = divide_safely_impl(\"not_a_number\", 5)\n",
        "print(f\" 타입 오류: {type_error['error']} - {type_error['message']}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. 연구 자료 저장 MCP 분석\n",
        "\n",
        "`research_storage_mcp.py` 파일에서 구현된 도구들과 리소스들을 분석해보겠습니다.\n",
        "\n",
        "### 실제 구현된 도구들\n",
        "1. `create_research_material` - 새로운 연구 자료 생성\n",
        "2. `update_research_material` - 기존 연구 자료 수정\n",
        "3. `delete_research_material` - 연구 자료 삭제\n",
        "4. `get_research_statistics` - 연구 자료 통계 제공\n",
        "5. `export_research_materials` - JSON 형식으로 내보내기\n",
        "\n",
        "### 실제 구현된 리소스들\n",
        "1. `research://materials` - 모든 연구 자료 목록\n",
        "2. `research://materials/{material_id}` - 특정 자료 상세 정보\n",
        "3. `research://materials/category/{category}` - 카테고리별 자료\n",
        "4. `research://materials/tag/{tag}` - 태그별 자료\n",
        "5. `research://materials/search/{query}` - 검색 결과\n",
        "\n",
        "### 데이터 모델\n",
        "- `ResearchMaterial` - Pydantic 모델로 구현\n",
        "- 파일 기반 JSON 저장 방식 사용\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. ADK와 MCP 연동 단계별 가이드\n",
        "\n",
        "### 연동 개요\n",
        "- **목표**: `research_storage_mcp.py` 서버를 ADK 에이전트에 연결\n",
        "- **방법**: `MCPToolset`과 `StdioServerParameters` 사용\n",
        "- **결과**: AI가 MCP 도구를 자동으로 사용할 수 있게 됨\n",
        "\n",
        "### 파일 구조 확인\n",
        "```\n",
        "agent_mcp/\n",
        "├── academic_research/\n",
        "│   ├── adk_config.py      # MCP 서버 설정 추가 필요\n",
        "│   ├── agent.py           # MCPToolset 연동 필요\n",
        "│   └── ...\n",
        "└── research_storage_mcp.py # MCP 서버\n",
        "```\n",
        "\n",
        "### 단계 1: adk_config.py 수정\n",
        "\n",
        "기존 파일에 다음 코드를 **추가**하세요:\n",
        "\n",
        "```python\n",
        "# MCP 서버 경로 설정\n",
        "import sys\n",
        "from pathlib import Path\n",
        "\n",
        "MCP_SERVER_DIR = Path(__file__).parent.parent\n",
        "RESEARCH_MCP_PATH = MCP_SERVER_DIR / \"research_storage_mcp.py\"\n",
        "\n",
        "# MCP 서버 설정\n",
        "MCP_SERVERS = {\n",
        "    \"research_storage\": {\n",
        "        \"command\": sys.executable,\n",
        "        \"args\": [str(RESEARCH_MCP_PATH)],\n",
        "        \"description\": \"연구 자료 저장 및 관리 MCP 서버\"\n",
        "    }\n",
        "}\n",
        "\n",
        "def get_research_mcp_config():\n",
        "    \"\"\"연구 자료 MCP 서버 설정 반환\"\"\"\n",
        "    return MCP_SERVERS[\"research_storage\"]\n",
        "```\n",
        "\n",
        "### 단계 2: agent.py 수정\n",
        "\n",
        "기존 파일에 다음 import와 설정을 추가하세요:\n",
        "\n",
        "```python\n",
        "# 1. Import 추가\n",
        "from google.adk.tools.mcp_tool.mcp_toolset import MCPToolset, StdioServerParameters\n",
        "\n",
        "# 2. MCP 서버 설정 추가 (tools 정의 전에)\n",
        "research_mcp_config = adk_config.get_research_mcp_config()\n",
        "research_mcp_toolset = MCPToolset(\n",
        "    connection_params=StdioServerParameters(\n",
        "        command=research_mcp_config[\"command\"],\n",
        "        args=research_mcp_config[\"args\"]\n",
        "    )\n",
        ")\n",
        "\n",
        "# 3. tools 목록에 추가\n",
        "tools=[\n",
        "    AgentTool(agent=academic_websearch_agent),\n",
        "    AgentTool(agent=academic_newresearch_agent),\n",
        "    research_mcp_toolset,  # 이 줄 추가\n",
        "]\n",
        "```\n",
        "\n",
        "### 단계 3: 검증 테스트\n",
        "\n",
        "```bash\n",
        "# 가상환경 활성화\n",
        "source venv/bin/activate\n",
        "\n",
        "# ADK 에이전트 실행\n",
        "adk run academic_research\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
